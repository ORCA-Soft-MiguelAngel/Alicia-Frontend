[{"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/index.js":"1","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/App.js":"2","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Login.js":"3","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Index.js":"4","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Dashboard.js":"5","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Layouts/MainLayout.js":"6","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Layouts/Footer.js":"7","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Layouts/Header.js":"8","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Layouts/Sidebar.js":"9","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Layouts/SidebarHeader.js":"10","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Company/CompanyCard.js":"11","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Company/CompanyViews.js":"12","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Company/NewCompanyCard.js":"13","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/AccountingHeader.js":"14","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Accounting/ChartOfAccounts.js":"15","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/helpers/dummyData.js":"16","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Table/DefaultTable.js":"17","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/helpers/columnData.js":"18","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/ChartOfAccountElements/NewAccountModal.js":"19","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Accounting/Records.js":"20","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/RecordElements/FixedTable.js":"21","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Accounting/Balance.js":"22","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Test.js":"23","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Utils/ImportFromFileBodyComponent.js":"24","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/ImportModal.js":"25","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Accounting/AccountingMovement.js":"26","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/BalanceElements/AdvancedSearcher.js":"27","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/config/axios.js":"28","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/hooks/useStores.js":"29","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/contexts/MainContext.js":"30","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/stores/CompanyStore.js":"31","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/stores/UserStore.js":"32","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/RecordElements/FlexibleTable.js":"33","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/helpers/functions.js":"34","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/RecordElements/RecordsDifference.js":"35","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/ChartOfAccountElements/ImportedAcoountsModal.js":"36","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/RecordElements/ImportedRecordsModal.js":"37"},{"size":196,"mtime":1608253726808,"results":"38","hashOfConfig":"39"},{"size":1408,"mtime":1610318143888,"results":"40","hashOfConfig":"39"},{"size":214,"mtime":1608254047942,"results":"41","hashOfConfig":"39"},{"size":282,"mtime":1608699782305,"results":"42","hashOfConfig":"39"},{"size":583,"mtime":1608705520510,"results":"43","hashOfConfig":"39"},{"size":1571,"mtime":1608706562750,"results":"44","hashOfConfig":"39"},{"size":153,"mtime":1608254895492,"results":"45","hashOfConfig":"39"},{"size":2005,"mtime":1608370939016,"results":"46","hashOfConfig":"39"},{"size":3649,"mtime":1608682189923,"results":"47","hashOfConfig":"39"},{"size":397,"mtime":1608359828781,"results":"48","hashOfConfig":"49"},{"size":1162,"mtime":1608704084771,"results":"50","hashOfConfig":"39"},{"size":1674,"mtime":1608707287901,"results":"51","hashOfConfig":"39"},{"size":3873,"mtime":1608704064701,"results":"52","hashOfConfig":"39"},{"size":768,"mtime":1608509717555,"results":"53","hashOfConfig":"39"},{"size":5845,"mtime":1610308777714,"results":"54","hashOfConfig":"39"},{"size":135,"mtime":1608535412867,"results":"55","hashOfConfig":"39"},{"size":5207,"mtime":1610204330301,"results":"56","hashOfConfig":"39"},{"size":6578,"mtime":1610310871115,"results":"57","hashOfConfig":"39"},{"size":5986,"mtime":1609688888182,"results":"58","hashOfConfig":"39"},{"size":1966,"mtime":1609687929802,"results":"59","hashOfConfig":"39"},{"size":6033,"mtime":1610306419185,"results":"60","hashOfConfig":"39"},{"size":3622,"mtime":1610187506739,"results":"61","hashOfConfig":"39"},{"size":207,"mtime":1608604907060,"results":"62","hashOfConfig":"39"},{"size":913,"mtime":1610199258954,"results":"63","hashOfConfig":"39"},{"size":4810,"mtime":1610316496155,"results":"64","hashOfConfig":"39"},{"size":3759,"mtime":1610188649373,"results":"65","hashOfConfig":"39"},{"size":2746,"mtime":1610186585779,"results":"66","hashOfConfig":"39"},{"size":164,"mtime":1608702570919,"results":"67","hashOfConfig":"39"},{"size":292,"mtime":1608705145544,"results":"68","hashOfConfig":"39"},{"size":245,"mtime":1608705056287,"results":"69","hashOfConfig":"39"},{"size":824,"mtime":1608706278914,"results":"70","hashOfConfig":"39"},{"size":779,"mtime":1608706256703,"results":"71","hashOfConfig":"39"},{"size":14370,"mtime":1610317749727,"results":"72","hashOfConfig":"39"},{"size":1099,"mtime":1608810276035,"results":"73","hashOfConfig":"39"},{"size":1223,"mtime":1609762264718,"results":"74","hashOfConfig":"39"},{"size":2438,"mtime":1610220836481,"results":"75","hashOfConfig":"39"},{"size":2582,"mtime":1610316173780,"results":"76","hashOfConfig":"39"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"te3tb5",{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"79"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"79"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4ohfs",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"79"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"79"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"79"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"79"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"79"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"79"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"79"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"79"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"79"},"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/index.js",[],["165","166"],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/App.js",["167"],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Login.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Index.js",["168"],"import React from 'react'\nimport CompanyCard from '../components/Company/CompanyCard'\n\nfunction Index() {\n\n    React.useEffect(()=>{\nconsole.log(process.env)\n    },[])\n\n    return (\n        <div>\n         {process.env.REACT_APP_API_URL}\n        </div>\n    )\n}\n\nexport default Index\n","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Dashboard.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Layouts/MainLayout.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Layouts/Footer.js",[],["169","170"],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Layouts/Header.js",["171","172","173"],"import React, { useState } from \"react\";\nimport { Button, Dropdown, Nav, Navbar } from \"react-bootstrap\";\nimport avatar from \"../../images/user/avatar.png\";\n\n//ICONS\nimport { BsSearch } from \"react-icons/bs\";\nimport { BsTextIndentLeft, BsTextIndentRight } from \"react-icons/bs\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = ({\n  //state of the sidebar\n  openSidebar = false,\n  //open or closes sidebar\n  handleSidebar = () => {},\n}) => {\n  return (\n    <Navbar variant=\"dark\" className=\"_header_bg shadow py-2\">\n      <Navbar.Brand>\n        <div className=\"pl-2 _header-sidebar-button\">\n          {openSidebar ? (\n            <BsTextIndentRight size={35} onClick={handleSidebar} />\n          ) : (\n            <BsTextIndentLeft size={35} onClick={handleSidebar} />\n          )}\n        </div>\n      </Navbar.Brand>\n      <Nav className=\"mr-auto align-items-center\">\n        <Navbar.Brand className=\"ml-3\">\n          <b>Alicia - Dashboard</b>\n        </Navbar.Brand>\n        <Nav.Item>\n          <BsSearch color=\"white\" />\n        </Nav.Item>\n      </Nav>\n      <div className=\"d-flex align-items-center\">\n        <img src={avatar} alt=\"Avatar\" className=\"_avatar\" />\n        <div>\n          <Notification />\n        </div>\n\n        <div className=\"d-flex flex-column px-2 text-light\">\n          <div>\n            {\" \"}\n            <b>Katherin Lisbeth</b>{\" \"}\n          </div>\n          <div>Free Tier</div>\n        </div>\n      </div>\n    </Navbar>\n  );\n};\n\nexport default Header;\n\n//NOTIFICATION COMPONENT\nconst Notification = () => {\n  return (\n    <Dropdown>\n      <Dropdown.Toggle\n        size=\"lg\"\n        className=\"_bg-transparent border-0 p-0 mx-2\"\n      ></Dropdown.Toggle>\n\n      <Dropdown.Menu align=\"right\" className=\"mt-3\">\n        <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n        <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n        <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Layouts/Sidebar.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Layouts/SidebarHeader.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Company/CompanyCard.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Company/CompanyViews.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Company/NewCompanyCard.js",["174"],"import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { Card, Modal, Button, Form } from \"react-bootstrap\";\nimport axiosClient from \"../../config/axios\";\nimport createCompany from \"../../images/companies/create-company.png\";\n\nconst NewCompanyCard = ({ setCompanies = () => {} }) => {\n  //STATES\n  //state related with the modal\n  const [modalShow, setModalShow] = React.useState(false);\n  //form data\n  const [form, setForm] = useState({\n    name: \"\",\n    rnc: \"\",\n    sector: \"\",\n    deadline: \"\",\n    owner: {\n      id: process.env.REACT_APP_TEST_USER,\n    },\n  });\n\n  //HANDLERS\n  //handle the form change\n  const handleFormChange = (e) => {\n    setForm({\n      ...form,\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  //handle create the company\n  const handleCreate = (e) => {\n    e.preventDefault();\n\n    //POST TO DATABASE\n    axiosClient\n      .post(\"/companies\", form)\n      .then((data) => {\n        axiosClient\n          .get(`/companies/user/${process.env.REACT_APP_TEST_USER}`)\n          .then((data) => {\n            setCompanies(data.data);\n            setModalShow(false)\n          });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <>\n      {/**CARD */}\n      <Card\n        className=\"shadow rounded w-100 h-100\"\n        onClick={() => setModalShow(true)}\n        style={{cursor:'pointer'}}\n      >\n        <Card.Img variant=\"top\" src={createCompany} />\n        <Card.Body className=\"text-center font-weight-bold\">\n          Agregar nueva compañia\n        </Card.Body>\n      </Card>\n      {/**MODAL */}\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n        form={form}\n        onFormChange={handleFormChange}\n        handleCreate={handleCreate}\n      />\n    </>\n  );\n};\n\nexport default NewCompanyCard;\n\nfunction MyVerticallyCenteredModal({\n  show,\n  onHide,\n  form,\n  onFormChange,\n  handleCreate,\n}) {\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Agregar Nueva Compañia\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group controlId=\"name\">\n            <Form.Label>Razon</Form.Label>\n            <Form.Control\n              placeholder=\"Nombre de la compañia\"\n              value={form.name}\n              onChange={onFormChange}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"rnc\">\n            <Form.Label>RNC</Form.Label>\n            <Form.Control\n              placeholder=\"RNC de la compañia\"\n              value={form.rnc}\n              onChange={onFormChange}\n            />\n          </Form.Group>\n\n          <Form.Group\n            controlId=\"sector\"\n            value={form.sector}\n            onChange={onFormChange}\n          >\n            <Form.Label>Sector</Form.Label>\n            <Form.Control as=\"select\">\n              <option>Sector 1</option>\n              <option>Sector 2</option>\n              <option>Sector 3</option>\n              <option>Sector 4</option>\n              <option>Sector 5</option>\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group\n            controlId=\"deadline\"\n            value={form.deadline}\n            onChange={onFormChange}\n          >\n            <Form.Label>Fecha de Cierre</Form.Label>\n            <Form.Control type=\"date\" placeholder=\"\" />\n          </Form.Group>\n\n          <div className=\"w-100 d-flex justify-content-end\">\n            <Button\n              variant=\"outline-success\"\n              type=\"submit\"\n              onClick={handleCreate}\n            >\n              Crear\n            </Button>\n          </div>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n}\n","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/AccountingHeader.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Accounting/ChartOfAccounts.js",["175","176","177","178","179"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Button } from \"react-bootstrap\";\nimport AccountingHeader from \"../../components/Accounting/AccountingHeader\";\nimport NewAccountModal from \"../../components/Accounting/ChartOfAccountElements/NewAccountModal\";\nimport MainLayout from \"../../components/Layouts/MainLayout\";\nimport DefaultTable from \"../../components/Table/DefaultTable\";\nimport { chartOfAccountColumns } from \"../../helpers/columnData\";\n\nimport { withRouter } from \"react-router-dom\";\nimport useStores from \"../../hooks/useStores\";\nimport axiosClient from \"../../config/axios\";\n\n//TEMPORAL IMPORTS (REMOVE LATER)\nimport { accountRows } from \"../../helpers/dummyData\";\nimport ImportedAcoountsModal from \"../../components/Accounting/ChartOfAccountElements/ImportedAcoountsModal\";\nimport { Collapse } from \"bootstrap\";\n\nconst ChartOfAccounts = ({ history }) => {\n  //STATE\n  //GLOBAL COMP STATE\n  const { CompanyStore } = useStores();\n  //if the table is loading by useEffect\n  const [loading, setLoading] = useState(false);\n  //main content of the table, initially empty\n  const [data, setData] = useState([]);\n\n  //special data of the final modal, in case of import\n  const [modalImportData, setModalImportData] = useState([]);\n  //show final import modal accounts\n  const [showImportModal, setShowImportModal] = useState(false);\n\n  //EFFECTS\n  //initial effect, prevent load this if you dont have any company assigned\n  useEffect(() => {\n    if (CompanyStore.obtainCompany === \"\") {\n      history.push(\"/dashboard\");\n    }\n  }, [CompanyStore, history]);\n  //main loading effect, to load the table\n  useEffect(() => {\n    setLoading(true);\n\n    axiosClient\n      .get(`/accounts/company/${CompanyStore.obtainCompany}`)\n      .then((data) => {\n        setData(data.data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n      });\n  }, []);\n  //effect when the data of the import change, to open the modal\n  useEffect(() => {\n    setTimeout(() => {\n      if (modalImportData.length > 0) {\n        setShowImportModal(true);\n      }\n    }, 150);\n  }, [modalImportData]);\n\n  //HANDLERS\n  //handle imported content\n  const handleImportedContent = (data) => {\n    //1st. test the column data\n    let validColumns = true;\n    const columnsArr = [\n      \"accountNumber\",\n      \"accountDetails\",\n      \"accountType\",\n      \"parentAccount\",\n    ];\n\n    for (let i = 0; i < columnsArr.length; i++) {\n      if (columnsArr[i] !== data.columns[i]) {\n        validColumns = false;\n      }\n    }\n\n    if (!validColumns) {\n      return;\n    }\n\n    //2nd. test each internal data\n    let arr = [];\n    data.forEach((account) => {\n      axiosClient\n        .get(`/accounts/number/${account.accountNumber}`)\n        .then((fetchedData) => {\n          let tmpOject = account;\n          tmpOject.status = true;\n          tmpOject.message = \"Valido\";\n\n          //test 1\n          if (account.accountType !== account.accountNumber[0]) {\n            tmpOject.status = false;\n            tmpOject.message = \"El tipo y el No. de Cuenta no coinciden\";\n          }\n\n          //test 2\n          if (fetchedData.data.length > 0) {\n            //this account already exists\n            tmpOject.status = false;\n            tmpOject.message = \"Esta cuenta ya existe\";\n          }\n\n          //test 3\n          if (\n            data.filter(\n              ({ accountNumber }) => accountNumber === account.accountNumber\n            ).length > 1\n          ) {\n            tmpOject.status = false;\n            tmpOject.message = \"Esta cuenta se repite en el .CSV\";\n          }\n\n          arr.push(tmpOject);\n        });\n    });\n\n    const multiplier = 150 - data.length * 5;\n\n    //3rd now recreate the final modal, with the data\n    setTimeout(() => {\n      setModalImportData(arr);\n    }, data.length * multiplier);\n  };\n\n  //handle confirm import data\n  const handleConfirmImportData = (data) => {\n    const arr = data.filter(({ status }) => status === false);\n\n    //only add this info if there is no problem\n    if (arr.length === 0) {\n      let finalPostAccountsArray = [];\n      data.forEach((account) => {\n        let e = account;\n        e.company = { id: CompanyStore.obtainCompany };\n        finalPostAccountsArray.push(e);\n      });\n      //LETS FETCH Dude\n      axiosClient\n        .post(`/accounts/all`, finalPostAccountsArray)\n        .then((result) => {\n          //another axios client to fetch all accounts again\n          setShowImportModal(false);\n          setLoading(true);\n\n\n          axiosClient\n            .get(`/accounts/company/${CompanyStore.obtainCompany}`)\n            .then((updateResult) => {\n\n              setData(updateResult.data);\n              setLoading(false);\n            });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  return (\n    <MainLayout>\n      <AccountingHeader\n        title=\"Catalogo de cuentas\"\n        description=\"Lista de cuentas registradas para COMAPANIA\"\n      />\n      {/**HERE WE GO WITH THE TABLE */}\n      <DefaultTable\n        columns={chartOfAccountColumns}\n        data={data}\n        loading={loading}\n        keyField=\"accountNumber\"\n        extraButtons={\n          <NewAccountModal\n            setData={setData}\n            companyId={CompanyStore.obtainCompany}\n          />\n        }\n        noDataMessage=\"No hay cuentas registradas\"\n        buttonsBelowTable\n        handleImportedContent={handleImportedContent}\n      />\n      {/**IMPORT CONFIRM MODAL */}\n      <ImportedAcoountsModal\n        show={showImportModal}\n        setShow={setShowImportModal}\n        importData={modalImportData}\n        setImportData={setModalImportData}\n        handleConfirmImport={handleConfirmImportData}\n      />\n    </MainLayout>\n  );\n};\n\nexport default withRouter(ChartOfAccounts);\n","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/helpers/dummyData.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Table/DefaultTable.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/helpers/columnData.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/ChartOfAccountElements/NewAccountModal.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Accounting/Records.js",["180","181","182","183"],"import React, { useEffect, useState } from \"react\";\nimport AccountingHeader from \"../../components/Accounting/AccountingHeader\";\nimport FixedTable from \"../../components/Accounting/RecordElements/FixedTable\";\nimport FlexibleTable from \"../../components/Accounting/RecordElements/FlexibleTable\";\nimport MainLayout from \"../../components/Layouts/MainLayout\";\n\n//test csv\nimport { csv } from \"d3\";\nimport { Row } from \"react-bootstrap\";\nimport ImportFromFileBodyComponent from \"../../components/Utils/ImportFromFileBodyComponent\";\n\nimport { withRouter } from \"react-router-dom\";\nimport useStores from \"../../hooks/useStores\";\n\nconst Records = ({ history }) => {\n  //STATE\n  //GLOBAL COMP STATE\n  const { CompanyStore } = useStores();\n  //import data\n  const [importData, setImportData] = useState([]);\n  //check in what state you are, adding a new seat or watching one\n  const [createSeats, setCreateSeats] = useState(false);\n  //if you already created something, force to search\n  const [forceSeatSearch, setForceSeatSearch] = useState(null);\n\n  //EFFECTS\n  //initial effect, prevent load this if you dont have any company assigned\n  useEffect(() => {\n    if (CompanyStore.obtainCompany === \"\") {\n      history.push(\"/dashboard\");\n    }\n  }, [CompanyStore, history]);\n  //effect when import data change\n  useEffect(() => {\n    if (importData !== []) {\n    }\n  }, [importData]);\n\n  return (\n    <MainLayout>\n      <AccountingHeader\n        title=\"Registros\"\n        description=\"Lista de cuentas registradas para COMAPANIA\"\n      />\n\n      {/**HERE WE GO WITH THE TABLE */}\n      {createSeats ? (\n        <FlexibleTable\n          companyId={CompanyStore.obtainCompany}\n          setCreateSeats={setCreateSeats}\n          setForceSeatSearch={setForceSeatSearch}\n        />\n      ) : (\n        <FixedTable\n          setCreateSeats={setCreateSeats}\n          forceSearch={forceSeatSearch}\n        />\n      )}\n    </MainLayout>\n  );\n};\n\nexport default withRouter(Records);\n","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/RecordElements/FixedTable.js",["184","185"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport { Col, Form, Row, Button, Alert } from \"react-bootstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport DefaultTable, { NoDataIndication } from \"../../Table/DefaultTable\";\n\n//HELPER IMPORTS\nimport {\n  recordFixedColumns,\n  seatFixedColumns,\n} from \"../../../helpers/columnData\";\nimport RecordsDifference from \"./RecordsDifference\";\nimport axiosClient from \"../../../config/axios\";\nimport useStores from \"../../../hooks/useStores\";\n\nconst FixedTable = ({\n  //data\n  data = [{ seatNumber: 1, seatType: \"aa\" }],\n  //setCreateSeats to control the state and change the view\n  setCreateSeats = () => {},\n  //if this have a seat on it force the search\n  forceSearch = null,\n}) => {\n  //GLOBAL STATE\n  const { CompanyStore } = useStores();\n  //STATES\n  //main seat data\n  const [seatData, setSeatData] = useState([]);\n  //main table data\n  const [recordsData, setRecordsData] = useState([]);\n  //total debit and credit\n  const [totalDebitAndCredit, setTotalDebitAndCredit] = useState({\n    debit: 0,\n    credit: 0,\n  });\n  //input state\n  const [searchSeat, setSearchSeat] = useState(\"\");\n  //alert state\n  const [showAlert, setShowAlert] = useState(false);\n  //show alert message if needed\n  const [alertMessage, setAlertMessage] = useState(\n    \"Ingresa un termino correcto para la busqueda de asientos\"\n  );\n  //state of table loading\n  const [loadingTableData, setLoadingTableData] = useState(false);\n  //no table content message\n  const [noContentTableMessage, setNoContentTableMessage] = useState(\n    \"Busca Algo Primero\"\n  );\n\n  //HELPERS\n  //search function\n  const search = useCallback((seatNumber = null) => {\n    const tempSeatNumber = seatNumber ? seatNumber : 0;\n\n    //ok if that didnt stop you, lets search\n    setLoadingTableData(true);\n    setSeatData([]);\n    setRecordsData([]);\n\n    axiosClient\n      .get(`/seats/company/${CompanyStore.obtainCompany}/${tempSeatNumber}`)\n      .then((seatFetch) => {\n        axiosClient\n          .get(`/records/seat/${CompanyStore.obtainCompany}/${tempSeatNumber}`)\n          .then((recordsFetch) => {\n            //calculate the total debit and credit\n            let totalDebit = 0;\n            let totalCredit = 0;\n            if (recordsFetch.data.length > 0) {\n              recordsFetch.data.forEach((record) => {\n                totalDebit += record.debit;\n                totalCredit += record.credit;\n              });\n            }\n\n            //set the data\n            setSeatData([seatFetch.data]);\n            setRecordsData(recordsFetch.data);\n            setTotalDebitAndCredit({ debit: totalDebit, credit: totalCredit });\n            setLoadingTableData(false);\n          });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  //EFFECTS\n  //force search if you got something\n  useEffect(() => {\n    if (forceSearch !== null) {\n      setLoadingTableData(true);\n      search(forceSearch);\n    }\n  }, [forceSearch, search]);\n\n  //HANDLERS\n  //handle create seat\n  const handleChangeToCreateSeat = () => {\n    setCreateSeats(true);\n  };\n  //handle when you write something in the input searcher\n  const handleSearcherInput = (e) => {\n    if (!isNaN(e.target.value)) {\n      setSearchSeat(e.target.value);\n    }\n  };\n  //handle search a seat for you :)\n  const handleSearchSeats = () => {\n    setShowAlert(false);\n    //first, test if is not empty\n    if (searchSeat === \"\") {\n      setShowAlert(true);\n      return;\n    }\n\n    //use the helper function\n    search(searchSeat);\n  };\n\n  return (\n    <div>\n      <Row className=\"mb-5 align-items-center\">\n        <Col xs={7}>\n          <BootstrapTable\n            columns={seatFixedColumns}\n            keyField=\"seatNumber\"\n            data={seatData}\n            bootstrap4\n            striped\n            bordered\n            wrapperClasses=\"table-responsive\" // This is the style provided by bootstrap 4, this will set the parent div with that class\n            hover\n            headerClasses=\"text-center align-middle\"\n            rowClasses=\"text-center\"\n            noDataIndication={() => (\n              <NoDataIndication loading={loadingTableData} message={\"\"} />\n            )}\n          />\n        </Col>\n        <Col xs={5} className=\"bg-light rounded border shadow-sm p-3\">\n          <Form.Group className=\"my-2\">\n            <Form.Label className=\"font-weight-bold\">\n              Buscar Por No. de Asiento\n            </Form.Label>\n            <Form.Control\n              value={searchSeat}\n              onChange={(e) => handleSearcherInput(e)}\n              placeholder=\"No. de Asiento\"\n              className=\"\"\n            />\n          </Form.Group>\n\n          <div className=\"d-flex justify-content-between\">\n            <Button\n              variant={`${\n                searchSeat === \"\" ? \"outline-secondary\" : \"outline-primary\"\n              }`}\n              disabled={searchSeat === \"\"}\n              onClick={handleSearchSeats}\n            >\n              Buscar\n            </Button>\n            <Button\n              variant=\"outline-success ml-2\"\n              onClick={handleChangeToCreateSeat}\n            >\n              Crear Asiento\n            </Button>\n          </div>\n          <Alert show={showAlert} variant=\"danger\" className=\"mt-2 mb-0\">\n            {alertMessage}\n          </Alert>\n        </Col>\n      </Row>\n      <Row>\n        <DefaultTable\n          columns={recordFixedColumns}\n          data={recordsData}\n          keyField=\"accountNumber\"\n          disableSearch\n          noDataMessage={noContentTableMessage}\n          loading={loadingTableData}\n          disableImport\n        />\n      </Row>\n      <Row className=\"mt-3 justify-content-end\">\n        <Col xs={4}>\n          <RecordsDifference\n            totalDebit={totalDebitAndCredit.debit}\n            totalCredit={totalDebitAndCredit.credit}\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default FixedTable;\n","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Accounting/Balance.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Test.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Utils/ImportFromFileBodyComponent.js",["186"],"import React from \"react\";\n\nimport * as d3 from \"d3\";\nimport { Form } from \"react-bootstrap\";\n\nconst ImportFromFileBodyComponent = ({ handleImportedContent }) => {\n  let fileReader;\n\n  const handleFileRead = (e) => {\n    const result = d3.csvParse(fileReader.result);\n    // … do something with the 'content' …\n    handleImportedContent(result);\n  };\n\n  const handleFileChosen = (file) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n\n    //fileReader.readAsText(file);\n    fileReader.readAsText(file);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        id=\"actual-btn\"\n        hidden\n        onChange={(e) => handleFileChosen(e.target.files[0])}\n        accept=\".csv\"\n      />\n      <label className=\"btn btn-outline-success btn-sm\" for=\"actual-btn\">\n        Buscar archivo...\n      </label>\n    </div>\n  );\n};\n\nexport default ImportFromFileBodyComponent;\n","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/ImportModal.js",["187"],"import React, { useMemo, useState, useCallback } from \"react\";\nimport { Modal, Button, Row, Col, Card } from \"react-bootstrap\";\nimport { useDropzone } from \"react-dropzone\";\nimport ImportFromFileBodyComponent from \"../Utils/ImportFromFileBodyComponent\";\nimport csvImportImage from \"../../images/imports/csv-import.jpeg\";\nimport * as d3 from \"d3\";\n\n/**RELATED WITH THE MODAL STYLE */\nconst baseStyle = {\n  flex: 1,\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  padding: \"20px\",\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: \"#eeeeee\",\n  borderStyle: \"dashed\",\n  backgroundColor: \"#fafafa\",\n  color: \"#bdbdbd\",\n  outline: \"none\",\n  transition: \"border .24s ease-in-out\",\n\n  height: \"400px\",\n};\n\nconst activeStyle = {\n  borderColor: \"#2196f3\",\n};\n\nconst acceptStyle = {\n  borderColor: \"#00e676\",\n};\n\nconst rejectStyle = {\n  borderColor: \"#ff1744\",\n};\n\nconst ImportModal = ({ modalTitle = \"Import\", handleImportedContent }) => {\n  //STATES\n  //state related with the modal\n  const [modalShow, setModalShow] = useState(false);\n\n  return (\n    <>\n      {/**CARD */}\n      <Button variant=\"outline-success mx-3\" onClick={() => setModalShow(true)}>\n        Importar CSV\n      </Button>{\" \"}\n      {/**MODAL */}\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n        title={modalTitle}\n        handleImportedContent={handleImportedContent}\n      />\n    </>\n  );\n};\n\nexport default ImportModal;\n\nfunction MyVerticallyCenteredModal({\n  show,\n  onHide, //Modal title\n  title = \"Import\", //modal title\n  handleImportedContent,\n}) {\n\n  //DROPZONE FUNCTION WHEN YPU DROP A FILE\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      acceptedFiles.forEach((file) => {\n        //process everything\n        const reader = new FileReader();\n\n        reader.onabort = () => console.log(\"file reading was aborted\");\n        reader.onerror = () => console.log(\"file reading has failed\");\n        reader.onload = () => {\n          handleImportedContent(d3.csvParse(reader.result));\n          onHide()\n        }\n        reader.readAsText(file);\n      });\n    },\n    []\n  );\n\n  //DROPZONE CHOOK CALL\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({ accept: \"text/csv\", onDrop });\n\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject, isDragAccept]\n  );\n\n  //handlers\n  const handleFileInput = (data)=>{\n    if(handleImportedContent){\n      handleImportedContent(data)\n      onHide()\n    }\n  }\n\n  return (\n    <Modal\n      centered\n      size=\"lg\"\n      show={show}\n      onHide={onHide}\n      aria-labelledby=\"example-modal-sizes-title-lg\"\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"example-modal-sizes-title-lg\">{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col xs={12} lg={6} className=\"px-0\">\n            {/**DRAG n DROP */}\n            <Row className=\"mx-0\">\n              <div className=\"container\">\n                <div {...getRootProps({ style })}>\n                  <input {...getInputProps()} />\n                  <p className=\"text-center\">\n                    Suelta los archivos que necesites aqui, nos encargaremos del\n                    resto :)\n                  </p>\n                </div>\n              </div>\n            </Row>\n            <Row className=\"mx-0 mt-4 justify-content-center\">\n              <ImportFromFileBodyComponent\n                handleImportedContent={handleFileInput}\n              />\n            </Row>\n          </Col>\n          <Col xs={12} lg={6}>\n            <Row className=\"mx-0\" style={{ height: \"400px\" }}>\n              <Card>\n                <Card.Img variant=\"top\" src={csvImportImage} />\n                <Card.Body>\n                  <Card.Title>Descarga plantilla</Card.Title>\n                  <Card.Text>\n                    <p>\n                      Los archivos que deseas importar deben de coincidir con\n                      los datos que seran integrados a la tabla.\n                    </p>\n                    <p className=\"mb-0\">\n                      Si no sabes exactamente cuales necesitas, descarga la\n                      plantilla!\n                    </p>\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            </Row>\n            <Row className=\"mx-0 mt-4 justify-content-center\">\n              <Button size=\"sm\" variant=\"outline-primary\">\n                Descargar plantilla\n              </Button>\n            </Row>\n          </Col>\n        </Row>\n      </Modal.Body>\n    </Modal>\n  );\n}\n","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/pages/Accounting/AccountingMovement.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/BalanceElements/AdvancedSearcher.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/config/axios.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/hooks/useStores.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/contexts/MainContext.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/stores/CompanyStore.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/stores/UserStore.js",[],["188","189"],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/RecordElements/FlexibleTable.js",["190","191","192","193"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Alert, Button, Col, Form, Modal, Row } from \"react-bootstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport {\n  seatFlexibleColumns,\n  recordFlexibleColumns,\n} from \"../../../helpers/columnData\";\nimport { getDate, gimmeEmptyRecords } from \"../../../helpers/functions\";\nimport DefaultTable from \"../../Table/DefaultTable\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nimport axiosClient from \"../../../config/axios\";\n\n//SPINNER\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport RecordsDifference from \"./RecordsDifference\";\n\n//icons\nimport { ImArrowLeft } from \"react-icons/im\";\nimport ImportedRecordsModal from \"./ImportedRecordsModal\";\n\nconst FlexibleTable = ({\n  companyId = \"\",\n  setCreateSeats,\n  setForceSeatSearch,\n}) => {\n  //STATES\n  //seat state\n  const [seat, setSeat] = useState({\n    seatNumber: \"\",\n    seatType: \"OTROS\",\n    transactionDate: \"\",\n    company: {\n      id: companyId,\n    },\n  });\n  //records states\n  const [records, setRecords] = useState([]);\n  //clients for this company\n  const [accounts, setAccounts] = useState([]);\n  //quantity of new rows\n  const [quantityOfNewRows, setQuantityOfNewRows] = useState(5);\n  //show alert\n  const [showAlert, setShowAlert] = useState(false);\n  //loading when creating seat\n  const [loading, setLoading] = useState(false);\n  //loading table elements\n  const [loadingTable, setLoadingTable] = useState(false);\n  //success modal\n  const [showSuccessModal, setShowSuccessModal] = useState(false); //check to delete\n  //Extras\n  const [totalBalance, setTotalBalance] = useState({\n    credit: 0,\n    debit: 0,\n    balance: 0,\n  });\n  //modal import data\n  const [modalImportData, setModalImportData] = useState([]);\n  //show final import modal accounts\n  const [showImportModal, setShowImportModal] = useState(false);\n  //test effect import\n  const [activateImport, setActivateImport] = useState(false);\n\n  //EFFECTS\n  //effect to set the date and the number of the seat\n  useEffect(() => {\n    //get seats\n    axiosClient.get(`/seats/company/${companyId}`).then((data) => {\n      let largestSeat = 0;\n\n      //compare numbers to get the largest seat\n      data.data.forEach((seat) => {\n        largestSeat =\n          seat.seatNumber > largestSeat\n            ? seat.seatNumber\n            : seat.seatNumber === largestSeat\n            ? largestSeat\n            : largestSeat;\n      });\n\n      setSeat({\n        ...seat,\n        seatNumber: largestSeat + 1,\n        transactionDate: \"\",\n      });\n    });\n\n    axiosClient.get(`/accounts/company/${companyId}`).then((data) => {\n      setAccounts(data.data);\n    });\n  }, []);\n  //effect when the data of the import change, to open the modal\n  useEffect(() => {\n    setTimeout(() => {\n      if (modalImportData.length > 0) {\n        setShowImportModal(true);\n      }\n    }, 150);\n  }, [modalImportData]);\n\n  //pseudo effect, lets test the move of import data to records\n  useEffect(() => {\n    if (activateImport && modalImportData.length > 0) {\n      let tmpTotalBalance = { credit: 0, debit: 0 };\n\n      records.concat(modalImportData).forEach((elem) => {\n        tmpTotalBalance.debit += Number(elem.debit);\n        tmpTotalBalance.credit += Number(elem.credit);\n      });\n\n      setRecords(records.concat(modalImportData));\n      setTotalBalance(tmpTotalBalance);\n      setModalImportData([]);\n      setActivateImport(false);\n    }\n  }, [activateImport, modalImportData, records]);\n\n  //HANDLERS\n  //handle change the quantity number\n  const handleChangeQuantity = (e) => {\n    if (!isNaN(e.target.value)) {\n      setQuantityOfNewRows(e.target.value);\n    }\n  };\n  //handle add more rows to records\n  const handleCreateRows = (e) => {\n    e.preventDefault();\n    setRecords(gimmeEmptyRecords(quantityOfNewRows, records));\n  };\n\n  //handle update?\n  const handleUpdateRecords = (newRecords) => {\n    setRecords(newRecords);\n  };\n\n  //handle create seat with all its records (FINAL)\n  const handleFinishThis = () => {\n    setLoading(true);\n    //if everything is fine, add everything\n\n    let bool = true;\n    records.forEach((record) => {\n      if (\n        record.account.id === \"\" ||\n        record.balance === \"0\" ||\n        record.balance === \"--\" ||\n        record.accountNumber === \"\" ||\n        record.accountDetails === \"--\" ||\n        record.accountType === \"--\" ||\n        record.parentAccount === \"--\"\n      ) {\n        if (bool) {\n          bool = false;\n        }\n      }\n    });\n\n    //add everything? i guess\n    if (bool) {\n      axiosClient.post(\"/seats\", seat).then((data) => {\n        let tmpArr = [];\n        records.forEach((record) => {\n          let elem = record;\n          elem.seat.id = data.data.id;\n          tmpArr.push(elem);\n        });\n        //last fetch\n        tmpArr.forEach((element) => {});\n        axiosClient.post(\"/records/all\", tmpArr).then((data) => {\n          setLoading(false);\n          setShowSuccessModal(true);\n        });\n      });\n    } else {\n      //something was wrong, fix it\n      setShowAlert(true);\n      setForceSeatSearch(seat);\n      setLoading(false);\n    }\n  };\n\n  //handle to change the debit credit and so on\n  const handleChangeTotal = (incomingRecords) => {\n    let totalDebit = 0;\n    let totalCredit = 0;\n    incomingRecords.forEach((incomingRecord) => {\n      if (!isNaN(incomingRecord.credit) || !isNaN(incomingRecord.debit)) {\n        totalDebit = totalDebit + Number(incomingRecord.debit);\n        totalCredit = totalCredit + Number(incomingRecord.credit);\n      } else {\n        return;\n      }\n    });\n    setTotalBalance({\n      debit: totalDebit,\n      credit: totalCredit,\n      balance: totalDebit - totalCredit,\n    });\n  };\n\n  //handle cell edit main table\n  const handleCellEdit = (oldValue, newValue, row, col) => {\n    //id is accountNumber, search if exist\n    if (col.dataField === \"accountNumber\" && newValue !== \"\") {\n      let data = accounts.filter(\n        ({ accountNumber }) => accountNumber === newValue\n      );\n\n      //if is not empty, fill rhe other data with this info\n      if (data.length > 0) {\n        let tempRecords = records;\n        for (let i = 0; i < tempRecords.length; i++) {\n          if (row.hiddenId === tempRecords[i].hiddenId) {\n            tempRecords[i].accountDetails = data[0].accountDetails;\n            tempRecords[i].accountType = data[0].accountType;\n            tempRecords[i].parentAccount = data[0].parentAccount;\n\n            /**remember to add the id */\n            tempRecords[i].account.id = data[0].id;\n          }\n        }\n        handleUpdateRecords(tempRecords);\n      }\n    }\n    //if is related to credit or debit\n    if (col.dataField === \"credit\" || col.dataField === \"debit\") {\n      if (newValue !== \"\") {\n        let tempRecords = records;\n        for (let i = 0; i < tempRecords.length; i++) {\n          if (row.hiddenId === tempRecords[i].hiddenId) {\n            if (col.dataField === \"credit\") {\n              if (!isNaN(newValue)) {\n                tempRecords[i].credit = newValue;\n                tempRecords[i].balance =\n                  tempRecords[i].debit - tempRecords[i].credit;\n              } else {\n              }\n            } else if (col.dataField === \"debit\") {\n              tempRecords[i].debit = newValue;\n              tempRecords[i].balance =\n                tempRecords[i].debit - tempRecords[i].credit;\n            }\n          }\n        }\n        handleUpdateRecords(tempRecords);\n        handleChangeTotal(tempRecords);\n      }\n    }\n  };\n\n  //end this i guess\n  const handleCloseSuccessModal = () => {\n    setShowSuccessModal(false);\n    setForceSeatSearch(seat.seatNumber);\n    setCreateSeats(false);\n  };\n\n  //handle back to show seats in case you want to abort\n  const handleCloseCreateSeats = () => {\n    setCreateSeats(false);\n  };\n\n  //HANDLERS 2\n  //handle the incoming data\n  const handleImportedContent = (data) => {\n    //1st. test the columns\n    let validColumns = true;\n    const columnsArr = [\n      \"accountNumber\",\n      \"benefactor\",\n      \"nfc\",\n      \"transactionDetails\",\n      \"debit\",\n    ];\n\n    for (let i = 0; i < columnsArr.length; i++) {\n      if (columnsArr[i] !== data.columns[i]) {\n        validColumns = false;\n      }\n    }\n\n    if (!validColumns) {\n      return;\n    }\n\n    axiosClient.get(`/accounts/company/${companyId}`).then((result) => {\n      const fetchedAccounts = result.data;\n\n      //2nd. test each internal data\n      let arr = [];\n      data.forEach((importedRecord) => {\n        let tmpObject = importedRecord;\n        tmpObject.status = true;\n        tmpObject.message = \"valido\";\n\n        //test if the account exists\n        const filter = fetchedAccounts.filter(\n          ({ accountNumber }) => accountNumber === tmpObject.accountNumber\n        );\n\n        if (filter.length !== 1) {\n          tmpObject.status = false;\n          tmpObject.message = \"El No. de cuenta no existe\";\n        } else {\n          tmpObject.account = { id: filter[0].id };\n          tmpObject.accountDetails = filter[0].accountDetails;\n          tmpObject.accountType = filter[0].accountType;\n          tmpObject.parentAccount = filter[0].parentAccount;\n          tmpObject.seat = { id: \"\" };\n        }\n\n        if (filter.length > 1) {\n          tmpObject.status = false;\n          tmpObject.message = \"Error de repeticion en la cuenta\";\n        }\n\n        if (isNaN(tmpObject.debit) || isNaN(tmpObject.credit)) {\n          tmpObject.status = false;\n          tmpObject.message = \"Debito o credito deben ser valores aceptables\";\n        } else {\n          tmpObject.balance =\n            Number(tmpObject.debit) - Number(tmpObject.credit);\n        }\n\n        arr.push(tmpObject);\n      });\n\n      //3rd. show the modal i guess\n      setModalImportData(arr);\n    });\n  };\n\n  //handle confirm import data\n  const handleConfirmImportData = (data) => {\n    const arr = modalImportData.filter(({ status }) => status === false);\n\n    if (arr.length === 0) {\n      setActivateImport(true);\n      setShowImportModal(false);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"mb-3\">\n        <Button\n          variant=\"outline-danger\"\n          onClick={handleCloseCreateSeats}\n          className=\"d-flex align-items-center\"\n        >\n          <ImArrowLeft size={25} />\n          <span className=\"ml-2\">Volver Atras</span>\n        </Button>\n      </div>\n      <Row>\n        <Col xs={7}>\n          <BootstrapTable\n            columns={seatFlexibleColumns}\n            keyField=\"seatNumber\"\n            data={[seat]}\n            bootstrap4\n            striped\n            bordered\n            wrapperClasses=\"table-responsive\" // This is the style provided by bootstrap 4, this will set the parent div with that class\n            hover\n            headerClasses=\"text-center align-middle\"\n            rowClasses=\"text-center\"\n            cellEdit={cellEditFactory({\n              mode: \"click\",\n              blurToSave: true,\n              afterSaveCell: (oldValue, newValue, row, col) => {\n                setSeat({\n                  ...seat,\n                  [col.dataField]: newValue,\n                });\n              },\n            })}\n          />\n        </Col>\n      </Row>\n      <AlertDissmisible show={showAlert} setShow={setShowAlert} />\n      <Row>\n        <DefaultTable\n          columns={recordFlexibleColumns}\n          data={records}\n          keyField=\"hiddenId\"\n          disableSearch\n          noDataMessage=\"Selecciona el numero de filas que deseas insertar abajo\"\n          loading={loadingTable}\n          editable\n          editableProperties={{\n            mode: \"click\",\n            blurToSave: true,\n            beforeSaveCell: handleCellEdit,\n          }}\n          handleImportedContent={handleImportedContent}\n        />\n      </Row>\n      <Row className=\"mt-3 justify-content-between align-items-start\">\n        <Col className=\"\">\n          <Form>\n            <Form.Group as={Row} controlId=\"quantity\">\n              <Form.Label column sm=\"3\">\n                Agregar Filas:\n              </Form.Label>\n              <Col sm=\"1\" className=\"mx-0 px-0\">\n                <Form.Control\n                  value={quantityOfNewRows}\n                  onChange={handleChangeQuantity}\n                />\n              </Col>\n              <Col sm=\"1\">\n                <Button onClick={handleCreateRows}>Crear</Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </Col>\n        {/**-------------------------TOTAL BALANCE ------------------------------- */}\n        <Col xs={4}>\n          <RecordsDifference\n            totalDebit={totalBalance.debit}\n            totalCredit={totalBalance.credit}\n          />\n        </Col>\n      </Row>\n      <Row className=\"justify-content-end mx-0\">\n        <Button\n          onClick={handleFinishThis}\n          size=\"lg\"\n          className=\"text-center\"\n          style={{ minWidth: \"157px\" }}\n          disabled={records.length === 0}\n        >\n          {!loading ? \"Crear Asiento\" : <PulseLoader size={20} color=\"white\" />}\n        </Button>\n      </Row>\n      <div>\n        <Modal show={showSuccessModal} onHide={handleCloseSuccessModal}>\n          <Modal.Header closeButton>\n            <Modal.Title className=\"text-success\">Status</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Tus registros han sido creados exitosamente!</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleCloseSuccessModal}>\n              Salir\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n      <div>\n        <ImportedRecordsModal\n          show={showImportModal}\n          setShow={setShowImportModal}\n          importData={modalImportData}\n          setImportData={setModalImportData}\n          handleConfirmImport={handleConfirmImportData}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default FlexibleTable;\n\nfunction AlertDissmisible({ show, setShow }) {\n  if (show) {\n    return (\n      <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n        <Alert.Heading>Tienes datos incompletos en tu tabla!</Alert.Heading>\n        <p>\n          no podemos guardar este asiento porque hay datos incompletos dentro de\n          la tabla, asegurate de llenarlos todos antes de proceder\n        </p>\n      </Alert>\n    );\n  }\n  return <div className=\"d-none\"></div>;\n}\n","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/helpers/functions.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/RecordElements/RecordsDifference.js",[],"/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/ChartOfAccountElements/ImportedAcoountsModal.js",["194"],"import React, { useState, useEffect } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { chartOfAccountImportColumns } from \"../../../helpers/columnData\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nconst ImportedAcoountsModal = ({\n  show = false,\n  setShow = () => {},\n  importData = [],\n  setImportData = () => {},\n  handleConfirmImport = () => {},\n}) => {\n  //STATE\n  //to print info about if every data is fine\n  const [importStatus, setImportStatus] = useState(true);\n  //loader effect\n  const [loading, setLoading] = useState(false);\n\n  //EFFECTS\n  //effect to prevent show a wrong message status\n  useEffect(() => {\n    const arr = importData.filter(({ status }) => status === false);\n    arr.length > 0 ? setImportStatus(false) : setImportStatus(true);\n  }, []);\n\n  //HANDLERS\n  //handle when close modal\n  const onCloseModal = () => {\n    setImportData([]);\n    setShow(false);\n  };\n\n  //handle confirm\n  const handleConfirmStartLoad = () => {\n    setLoading(true);\n    handleConfirmImport(importData);\n  };\n\n  return (\n    <Modal\n      show={show}\n      onHide={onCloseModal}\n      dialogClassName=\"w-75 mw-100\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"example-modal-sizes-title-lg\">\n          Cuentas a Importar\n        </Modal.Title>\n      </Modal.Header>\n      {loading ? (\n        <div className=\"w-100 d-flex justify-content-center my-5\">\n          <PulseLoader size={35} color=\"#5cb85c\" />\n        </div>\n      ) : (\n        <Modal.Body>\n          <h5>\n            {importStatus\n              ? \"Confirma para agregar todas las cuentas\"\n              : \"No puedes importar debido a error en la informacion proporcionada, revisa la tabla para ver los detalles\"}\n          </h5>\n          <div>\n            <BootstrapTable\n              columns={chartOfAccountImportColumns}\n              data={importData}\n              keyField=\"accountNumber\"\n            />\n          </div>\n        </Modal.Body>\n      )}\n      <Modal.Footer>\n        <Button variant=\"outline-danger\" onClick={() => setShow(false)}>\n          Cerrar\n        </Button>\n        <Button\n          variant=\"outline-success\"\n          disabled={!importStatus}\n          onClick={handleConfirmStartLoad}\n        >\n          IMPORTAR\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default ImportedAcoountsModal;\n","/mnt/7AAA080EAA07C61B/MIGUEL/PROYECTOS/Alicia/alicia-frontend/src/components/Accounting/RecordElements/ImportedRecordsModal.js",["195"],"import React, { useState, useEffect } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { recordsImportColumns } from \"../../../helpers/columnData\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nconst ImportedRecordsModal = ({\n  show = false,\n  setShow = () => {},\n  importData = [],\n  setImportData = () => {},\n  handleConfirmImport = () => {},\n}) => {\n  //STATE\n  //to print info about if every data is fine\n  const [importStatus, setImportStatus] = useState(true);\n  //loader effect\n  const [loading, setLoading] = useState(false);\n\n  //EFFECTS\n  //effect to prevent show a wrong message status\n  useEffect(() => {\n    setLoading(false);\n    const arr = importData.filter(({ status }) => status === false);\n    arr.length > 0 ? setImportStatus(false) : setImportStatus(true);\n  }, []);\n\n  useEffect(() => {\n    if (show) {\n      setLoading(false);\n    }\n  }, [show]);\n\n  //HANDLERS\n  //handle when close modal\n  const onCloseModal = () => {\n    setImportData([]);\n    setLoading(false);\n    setShow(false);\n  };\n\n  //handle confirm\n  const handleConfirmStartLoad = () => {\n    setLoading(true);\n    handleConfirmImport(importData);\n  };\n\n  return (\n    <Modal\n      show={show}\n      onHide={onCloseModal}\n      dialogClassName=\"w-75 mw-100\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"example-modal-sizes-title-lg\">\n          Cuentas a Importar\n        </Modal.Title>\n      </Modal.Header>\n      {loading ? (\n        <div className=\"w-100 d-flex justify-content-center my-5\">\n          <PulseLoader size={35} color=\"#5cb85c\" />\n        </div>\n      ) : (\n        <Modal.Body>\n          <h5>\n            {importStatus\n              ? \"Confirma para agregar todas las cuentas\"\n              : \"No puedes importar debido a error en la informacion proporcionada, revisa la tabla para ver los detalles\"}\n          </h5>\n          <div>\n            <BootstrapTable\n              columns={recordsImportColumns}\n              data={importData}\n              keyField=\"accountNumber\"\n            />\n          </div>\n        </Modal.Body>\n      )}\n      <Modal.Footer>\n        <Button variant=\"outline-danger\" onClick={() => setShow(false)}>\n          Cerrar\n        </Button>\n        {importData.filter(({ status }) => status === false).length === 0 && (\n          <Button variant=\"outline-success\" onClick={handleConfirmStartLoad}>\n            IMPORTAR\n          </Button>\n        )}\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default ImportedRecordsModal;\n",{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":20,"column":18,"nodeType":"202","messageId":"203","endLine":20,"endColumn":27},{"ruleId":"200","severity":1,"message":"204","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":19},{"ruleId":"196","replacedBy":"205"},{"ruleId":"198","replacedBy":"206"},{"ruleId":"200","severity":1,"message":"207","line":1,"column":17,"nodeType":"202","messageId":"203","endLine":1,"endColumn":25},{"ruleId":"200","severity":1,"message":"208","line":2,"column":10,"nodeType":"202","messageId":"203","endLine":2,"endColumn":16},{"ruleId":"200","severity":1,"message":"209","line":8,"column":10,"nodeType":"202","messageId":"203","endLine":8,"endColumn":14},{"ruleId":"200","severity":1,"message":"210","line":1,"column":8,"nodeType":"202","messageId":"203","endLine":1,"endColumn":13},{"ruleId":"200","severity":1,"message":"211","line":2,"column":10,"nodeType":"202","messageId":"203","endLine":2,"endColumn":13},{"ruleId":"200","severity":1,"message":"208","line":2,"column":15,"nodeType":"202","messageId":"203","endLine":2,"endColumn":21},{"ruleId":"200","severity":1,"message":"212","line":14,"column":10,"nodeType":"202","messageId":"203","endLine":14,"endColumn":21},{"ruleId":"200","severity":1,"message":"213","line":16,"column":10,"nodeType":"202","messageId":"203","endLine":16,"endColumn":18},{"ruleId":"214","severity":1,"message":"215","line":53,"column":6,"nodeType":"216","endLine":53,"endColumn":8,"suggestions":"217"},{"ruleId":"200","severity":1,"message":"218","line":8,"column":10,"nodeType":"202","messageId":"203","endLine":8,"endColumn":13},{"ruleId":"200","severity":1,"message":"211","line":9,"column":10,"nodeType":"202","messageId":"203","endLine":9,"endColumn":13},{"ruleId":"200","severity":1,"message":"219","line":10,"column":8,"nodeType":"202","messageId":"203","endLine":10,"endColumn":35},{"ruleId":"200","severity":1,"message":"220","line":20,"column":22,"nodeType":"202","messageId":"203","endLine":20,"endColumn":35},{"ruleId":"200","severity":1,"message":"221","line":40,"column":24,"nodeType":"202","messageId":"203","endLine":40,"endColumn":39},{"ruleId":"200","severity":1,"message":"222","line":46,"column":33,"nodeType":"202","messageId":"203","endLine":46,"endColumn":57},{"ruleId":"200","severity":1,"message":"223","line":4,"column":10,"nodeType":"202","messageId":"203","endLine":4,"endColumn":14},{"ruleId":"214","severity":1,"message":"224","line":87,"column":5,"nodeType":"216","endLine":87,"endColumn":7,"suggestions":"225"},{"ruleId":"196","replacedBy":"226"},{"ruleId":"198","replacedBy":"227"},{"ruleId":"200","severity":1,"message":"228","line":1,"column":38,"nodeType":"202","messageId":"203","endLine":1,"endColumn":44},{"ruleId":"200","severity":1,"message":"229","line":8,"column":10,"nodeType":"202","messageId":"203","endLine":8,"endColumn":17},{"ruleId":"200","severity":1,"message":"230","line":48,"column":24,"nodeType":"202","messageId":"203","endLine":48,"endColumn":39},{"ruleId":"214","severity":1,"message":"231","line":91,"column":6,"nodeType":"216","endLine":91,"endColumn":8,"suggestions":"232"},{"ruleId":"214","severity":1,"message":"233","line":25,"column":6,"nodeType":"216","endLine":25,"endColumn":8,"suggestions":"234"},{"ruleId":"214","severity":1,"message":"233","line":26,"column":6,"nodeType":"216","endLine":26,"endColumn":8,"suggestions":"235"},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],"no-unused-vars","'setLogged' is assigned a value but never used.","Identifier","unusedVar","'CompanyCard' is defined but never used.",["236"],["237"],"'useState' is defined but never used.","'Button' is defined but never used.","'Link' is defined but never used.","'axios' is defined but never used.","'Row' is defined but never used.","'accountRows' is defined but never used.","'Collapse' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'CompanyStore.obtainCompany'. Either include it or remove the dependency array.","ArrayExpression",["238"],"'csv' is defined but never used.","'ImportFromFileBodyComponent' is defined but never used.","'setImportData' is assigned a value but never used.","'setAlertMessage' is assigned a value but never used.","'setNoContentTableMessage' is assigned a value but never used.","'Form' is defined but never used.","React Hook useCallback has missing dependencies: 'handleImportedContent' and 'onHide'. Either include them or remove the dependency array. If 'handleImportedContent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["239"],["236"],["237"],"'useRef' is defined but never used.","'getDate' is defined but never used.","'setLoadingTable' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'companyId' and 'seat'. Either include them or remove the dependency array. You can also do a functional update 'setSeat(s => ...)' if you only need 'seat' in the 'setSeat' call.",["240"],"React Hook useEffect has a missing dependency: 'importData'. Either include it or remove the dependency array.",["241"],["242"],"no-global-assign","no-unsafe-negation",{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"249","fix":"251"},"Update the dependencies array to be: [CompanyStore.obtainCompany]",{"range":"252","text":"253"},"Update the dependencies array to be: [handleImportedContent, onHide]",{"range":"254","text":"255"},"Update the dependencies array to be: [companyId, seat]",{"range":"256","text":"257"},"Update the dependencies array to be: [importData]",{"range":"258","text":"259"},{"range":"260","text":"259"},[1927,1929],"[CompanyStore.obtainCompany]",[2162,2164],"[handleImportedContent, onHide]",[2698,2700],"[companyId, seat]",[855,857],"[importData]",[870,872]]